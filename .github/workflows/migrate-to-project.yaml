name: Bulk migrate existing issues/PRs

on:
  workflow_dispatch:
    inputs:
      project:
        description: Project board number
        required: true
      org:
        description: Organization that owns the project
        required: true
      repo:
        description: Repository to run migration on (owner/repo format)
        required: true
      todo_status:
        description: Name of the 'Todo' status on the project board
        required: true

env:
  GITHUB_TOKEN: ${{ secrets.PLANNING_AUTOMATION_TOKEN }}
jobs:
  migrate:
    runs-on: ubuntu-latest
    name: migrate
    steps:
      - name: Fetch project data
        run: |
          gh api graphql -f query='
            query($org: String!, $num: Int!) {
              organization(login: $org){
                projectNext(number: $num) {
                  id
                  fields(first: 20) {
                    nodes {
                      id
                      name
                      settings
                    }
                  }
                }
              }
            }' -f org=${{ github.event.inputs.org }} -F num=${{ github.event.inputs.project }} > project_data.json

          echo 'PROJECT_ID='$(jq -r '.data.organization.projectNext.id' project_data.json) >> $GITHUB_ENV
          echo 'STATUS_FIELD_ID='$(jq -r '.data.organization.projectNext.fields.nodes[] | select(.name == "Status").id' project_data.json) >> $GITHUB_ENV
          echo 'TODO_OPTION_ID='$(jq -r '.data.organization.projectNext.fields.nodes[] | select(.name == "Status").settings | fromjson.options[] | select(.name=="${{ github.event.inputs.todo_status }}").id' project_data.json) >> $GITHUB_ENV

      - name: Store open issue/PR list
        run: |
          full_repo="${{ github.event.inputs.repo }}"
          tmp=(${full_repo//// })
          org="${tmp[0]}"
          repo="${tmp[1]}"
          gh api graphql -f query='
            query ($org: String!, $repo: String!) {
              repository(owner: $org, name: $repo) {
                issues: issues(states: OPEN, first: 100) {
                  edges {
                    node {
                      id
                    }
                  }
                }
                prs: pullRequests(states: OPEN, first: 100) {
                  edges {
                    node {
                      id
                    }
                  }
                }
              }
          }' -f org="$org" -f repo="$repo" > data.json

      - name: Extract issue/PR IDs and migrate
        run: |
          ISSUE_IDS=($(jq .data.repository.issues.edges[].node.id -c data.json))
          PR_IDS=($(jq .data.repository.prs.edges[].node.id -c data.json))

          migrate() {
            ISSUE_PR_ID="$1"

            ITEM_ID="$( gh api graphql -f query='
              mutation($project: ID!, $id: ID!) {
                addProjectNextItem(input: {
                  projectId: $project,
                  contentId: $id,
                  }) {
                  projectNextItem {
                    id
                  }
                }
              }' -f project=$PROJECT_ID -f id=$ISSUE_PR_ID --jq '.data.addProjectNextItem.projectNextItem.id')"

            gh api graphql -f query='
              mutation (
                $project: ID!
                $item: ID!
                $status_field: ID!
                $status_value: String!
              ) {
                updateProjectNextItemField(input: {
                   projectId: $project
                   itemId: $item
                   fieldId: $status_field
                   value: $status_value
                 }) {
                   projectNextItem {
                     id
                   }
                 }
              }' -f project=$PROJECT_ID -f item=$ITEM_ID -f status_field=$STATUS_FIELD_ID -f status_value=$TODO_OPTION_ID
          }

          printf "\nMigrating issues...\n"
          for id in "${ISSUE_IDS[@]}"; do
            migrate "$id"
          done

          printf "\nMigrating PRs...\n"
          for id in "${PR_IDS[@]}"; do
            migrate "$id"
          done
