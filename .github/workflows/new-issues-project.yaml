name: Move new issues to project
# Moves new issues to the project board.

on:
  issues:
    types: [opened]

jobs:
  automate-project-columns:
    runs-on: ubuntu-latest
    steps:
      # This step gets all the project data required to
      # build a GraphQL mutation that moves a new issue
      # to the correct project column.
      # We make use of the magic GITHUB_ENV environment variable
      # to have these accessible across our workflow run.
      - name: Get project data
        id: project_data
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          ORG: "ory-corp"
          PROJECT_NUMBER: 9
        run: |
          gh api graphql -f query='
            query($org: String!, $num: Int!) {
              organization(login: $org){
                projectNext(number: $num) {
                  id
                  fields(first: 20) {
                    nodes {
                      id
                      name
                      settings
                    }
                  }
                }
              }
            }' -f org=$ORG -F num=$PROJECT_NUMBER > project_data.json

          echo 'PROJECT_ID='$(jq -r '.data.organization.projectNext.id' project_data.json) >> $GITHUB_ENV
          echo 'STATUS_FIELD_ID='$(jq -r '.data.organization.projectNext.fields.nodes[] | select(.name == "Status").id' project_data.json) >> $GITHUB_ENV
          echo 'TODO_OPTION_ID='$(jq -r '.data.organization.projectNext.fields.nodes[] | select(.name == "Status").settings | fromjson.options[] | select(.name=="Todo").id' project_data.json) >> $GITHUB_ENV

      # We simply add the issue to the project.
      # Setting the 'Status' field is done in the next step.
      - name: Add issue to project
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          ISSUE_ID: ${{ github.event.issue.node_id }}
        run: |
          item_id="$( gh api graphql -f query='
            mutation($project: ID!, $issue: ID!) {
              addProjectNextItem(input: {
                projectId: $project,
                contentId: $issue
                }) {
                projectNextItem {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f issue=$ISSUE_ID --jq '.data.addProjectNextItem.projectNextItem.id')"

          echo 'ITEM_ID='$item_id >> $GITHUB_ENV

      # Set the relevant fields. Add as many as required.
      - name: Set fields
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          gh api graphql -f query='
            mutation (
              $project: ID!
              $item: ID!
              $status_field: ID!
              $status_value: String!
            ) {
              updateProjectNextItemField(input: {
                 projectId: $project
                 itemId: $item
                 fieldId: $status_field
                 value: $status_value
               }) {
                 projectNextItem {
                   id
                 }
               }
            }' -f project=$PROJECT_ID -f item=$ITEM_ID -f status_field=$STATUS_FIELD_ID -f status_value=$TODO_OPTION_ID
