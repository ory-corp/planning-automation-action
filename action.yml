name: 'Project Board Automation'
description: 'Automate GitHub Projects with ease'
inputs:
  project:
    description: Project board number
    required: true
    default: 1
  token:
    description: GitHub PAT with org:write
    required: true
  org:
    description: Organization that owns the project
    required: false
    default: ${{ github.repository_owner }}
  label:
    description: Initial label for new issues/PRs
    required: false
    default: "needs triage"
runs:
  using: "composite"
  steps:
    - name: Initial labeling
      uses: andymckay/labeler@e6c4322d0397f3240f0e7e30a33b5c5df2d39e90
      with:
        add-labels: "${{ inputs.label }}"
        ignore-if-assigned: true
        ignore-if-labeled: true

    - name: Fetch project data
      run: |
        gh api graphql -f query='
          query($org: String!, $num: Int!) {
            organization(login: $org){
              projectNext(number: $num) {
                id
                fields(first: 20) {
                  nodes {
                    id
                    name
                    settings
                  }
                }
              }
            }
          }' -f org=$ORG -F num=${{ inputs.project }} > project_data.json

        echo 'PROJECT_ID='$(jq -r '.data.organization.projectNext.id' project_data.json) >> $GITHUB_ENV
        echo 'STATUS_FIELD_ID='$(jq -r '.data.organization.projectNext.fields.nodes[] | select(.name == "Status").id' project_data.json) >> $GITHUB_ENV
        echo 'TODO_OPTION_ID='$(jq -r '.data.organization.projectNext.fields.nodes[] | select(.name == "Status").settings | fromjson.options[] | select(.name=="Todo").id' project_data.json) >> $GITHUB_ENV
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
        ORG: ${{ inputs.org }}
      shell: bash

    - name: Get issue/PR ID
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo 'ISSUE_PR_ID='${{ github.event.pull_request.node_id }} >> $GITHUB_ENV
        elif [[ "${{ github.event_name }}" == "issues" ]]; then
            echo 'ISSUE_PR_ID='${{ github.event.issue.node_id }} >> $GITHUB_ENV
        fi
      shell: bash

    - name: Move issue/PR to project
      run: |
        item_id="$( gh api graphql -f query='
          mutation($project: ID!, $id: ID!) {
            addProjectNextItem(input: {
              projectId: $project,
              contentId: $id,
              }) {
              projectNextItem {
                id
              }
            }
          }' -f project=$PROJECT_ID -f id=$ISSUE_PR_ID --jq '.data.addProjectNextItem.projectNextItem.id')"

        echo 'ITEM_ID='$item_id >> $GITHUB_ENV
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      shell: bash

    - name: Set fields on project ticket
      run: |
        gh api graphql -f query='
          mutation (
            $project: ID!
            $item: ID!
            $status_field: ID!
            $status_value: String!
          ) {
            updateProjectNextItemField(input: {
               projectId: $project
               itemId: $item
               fieldId: $status_field
               value: $status_value
             }) {
               projectNextItem {
                 id
               }
             }
          }' -f project=$PROJECT_ID -f item=$ITEM_ID -f status_field=$STATUS_FIELD_ID -f status_value=$TODO_OPTION_ID
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      shell: bash
